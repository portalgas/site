<?phpApp::uses('AppModel', 'Model');App::uses('Folder', 'Utility');App::uses('File', 'Utility');App::import('Vendor', 'xtcpdf');class Statistic extends AppModel {    public $useTable = false;    /*     * cron::archiveStatistics()     * 	tratta Delivery.stato_elaborazione = CLOSE (portate a CLOSE dal Cassiere)      * 		 dati archiviati in Statistiche     * 		 cancellazione Carrello / Ordini / Consegne     */    public function archivePayToDeliveryOn($user, $debug = false) {        $organization_id = $user->organization['Organization']['id'];        try {            /*             * estraggo le consegne chiuse             */            App::import('Model', 'Order');            App::import('Model', 'ArticlesOrder');            $ArticlesOrder = new ArticlesOrder;            if ($debug)                echo "\r" . date("d/m/Y") . " - " . date("H:i:s") . " ";            if ($debug)                echo "Estraggo tutte le Delivery.stato_elaborazione = CLOSE  di " . Configure::read('GGArchiveStatics') . " gg passati\n";            if ($debug)                echo " -> dati archiviati in Statistiche \n";            if ($debug)                echo " -> cancellazione Carrello / Ordini / Consegne \n";            $deliveriesResults = $this->__getDeliveriesArchivePayToDeliveryOn($user, $organization_id, $debug);            if (!empty($deliveriesResults))                foreach ($deliveriesResults as $numResult => $deliveriesResult) {                    if ($debug)                        echo " Tratto consegna " . $deliveriesResult['Delivery']['id'] . " \n";                    $this->__createPdfUserDelivery($user, $deliveriesResult['Delivery'], $debug);                    $this->__statDeliveryInsert($user, $deliveriesResult['Delivery'], $debug);                    /*                     * orders                     */                    $Order = new Order;                    $options = array();                    $options['conditions'] = array('Order.organization_id' => $deliveriesResult['Delivery']['organization_id'],                        'Order.delivery_id' => $deliveriesResult['Delivery']['id'],                        'Order.state_code' => 'CLOSE');                    $options['recursive'] = -1;                    $options['order'] = array('Order.organization_id', 'Order.id');                    $ordersResults = $Order->find('all', $options);                    if ($debug)                        echo " trovati " . count($ordersResults) . " ordini \n";                    foreach ($ordersResults as $ordersResult) {                        $this->__statOrderInsert($user, $ordersResult['Order'], $debug);                        $conditions = array();                        $conditions = array('Order.id' => $ordersResult['Order']['id'],                            'ArticlesOrder.order_id' => $ordersResult['Order']['id'],                            'Cart.deleteToReferent' => 'N');                        $articlesOrders = $ArticlesOrder->getArticoliAcquistatiDaUtenteInOrdine($user, $conditions);                        $organization_id_old = 0;                        $order_id_old = 0;                        $article_organization_id_old = 0;                        $article_id_old = 0;                        foreach ($articlesOrders as $numArticlesOrder => $articlesOrder) {                            if ($organization_id_old != $articlesOrder['ArticlesOrder']['organization_id'] ||                                    $order_id_old != $articlesOrder['ArticlesOrder']['order_id'] ||                                    $article_organization_id_old != $articlesOrder['ArticlesOrder']['article_organization_id'] ||                                    $article_id_old != $articlesOrder['ArticlesOrder']['article_id'])                                $this->__statArticlesOrderInsert($user, $articlesOrder['Article'], $articlesOrder['ArticlesOrder'], $debug);                            $this->__statCartInsert($user, $articlesOrder['Cart'], $articlesOrder['ArticlesOrder'], $debug);                            $organization_id_old = $articlesOrder['ArticlesOrder']['organization_id'];                            $order_id_old = $articlesOrder['ArticlesOrder']['order_id'];                            $article_organization_id_old = $articlesOrder['ArticlesOrder']['article_organization_id'];                            $article_id_old = $articlesOrder['ArticlesOrder']['article_id'];                        } // loop ArticlesOrders                        $this->__deleteOrder($user, $ordersResult['Order'], $debug);                    } // loop Orders                    $this->__deleteDelivery($user, $deliveriesResult['Delivery'], $debug);                } // loop Deliveries        } catch (Exception $e) {            if ($debug)                echo '<br />Statitics::archivePayToDeliveryOn()<br />' . $e;        }    }    /*     * estraggo le consegna da cancellare (quelle CLOSE) Delivery.stato_elaborazione = CLOSE (portate a CLOSE dal Cassiere)      */    private function __getDeliveriesArchivePayToDeliveryOn($user, $organization_id, $debug) {        App::import('Model', 'Delivery');        $Delivery = new Delivery;        $options = array();        $options['conditions'] = array('Delivery.organization_id' => (int) $organization_id,            'Delivery.stato_elaborazione' => 'CLOSE',            'DATE(Delivery.data) <= (CURDATE()- INTERVAL ' . Configure::read('GGArchiveStatics') . ' DAY )');        $options['recursive'] = -1;        $options['order'] = array('Delivery.id');        $results = $Delivery->find('all', $options);        if ($debug)            echo " trovate " . count($results) . " consegne \n";        return $results;    }    /*     * cron::archiveStatistics()     * 	tratta tratto le RequestPayment.stato_elaborazione = CLOSE (portate a CLOSE da Cron::requestPaymentStatoElaborazione)     * 		 cancello tutte le richiesta di pagamento CLOSE      * 		 dati archiviati in Statistiche     * 		 cancellazione Carrello / Ordini / Consegne     */    public function archivePayToDeliveryPost($user, $debug = false) {        $organization_id = $user->organization['Organization']['id'];        App::import('Model', 'RequestPayment');        $RequestPayment = new RequestPayment;        App::import('Model', 'RequestPaymentsOrder');        try {            App::import('Model', 'Delivery');            $Delivery = new Delivery;            if ($debug)                echo "\r" . date("d/m/Y") . " - " . date("H:i:s") . " ";            if ($debug)                echo "Cancello tutte le richiesta con RequestPayment.stato_elaborazione = CLOSE e RequestPayment.stato_elaborazione_date di " . Configure::read('GGArchiveStatics') . " gg passati\n";            if ($debug)                echo " -> dati archiviati in Statistiche \n";            if ($debug)                echo " -> cancellazione Carrello / Ordini / Consegne \n";            $requestPaymentResults = $this->__getRequestPaymentsArchivePayToDeliveryPost($user, $organization_id, $debug);            if (!empty($requestPaymentResults))                foreach ($requestPaymentResults as $requestPaymentResult) {                    $request_payment_id = $requestPaymentResult['RequestPayment']['id'];                    /*                     * della richiesta di pagamento recupero la consegna                     */                    $RequestPaymentsOrder = new RequestPaymentsOrder;                    $options = array();                    $options['conditions'] = array('RequestPaymentsOrder.organization_id' => $organization_id,                        'RequestPaymentsOrder.request_payment_id' => $request_payment_id);                    $options['group'] = array('RequestPaymentsOrder.delivery_id');                    $options['recursive'] = -1;                    $requestPaymentsOrderResults = $RequestPaymentsOrder->find('all', $options);                    if (!empty($requestPaymentsOrderResults))                        foreach ($requestPaymentsOrderResults as $requestPaymentsOrderResult) {                            $delivery_id = $requestPaymentsOrderResult['RequestPaymentsOrder']['delivery_id'];                            $Delivery = new Delivery;                            $options = array();                            $options['conditions'] = array('Delivery.organization_id' => $organization_id,                                'Delivery.id' => $delivery_id);                            $options['recursive'] = -1;                            $deliveryResults = $Delivery->find('first', $options);                            $this->__createPdfUserDelivery($user, $deliveryResults['Delivery'], $debug);                        }                    /*                     * estraggo i dettagli di una richiesta di pagamento                     * 	- ordini associati                     *  - voci di spesa generica                     *  - dispensa                     */                    $results = $this->getAllDetailsToStatistic($user, $request_payment_id);                    foreach ($results['RequestPaymentOrder'] as $result) {                        if ($debug)                            echo " Tratto consegna " . $result['Delivery']['id'] . " \n";                        $this->__statDeliveryInsert($user, $result['Delivery'], $debug);                        $this->__statOrderInsert($user, $result['Order'], $debug);                        foreach ($result['ArticlesOrder'] as $articlesOrder) {                            $this->__statArticlesOrderInsert($user, $articlesOrder['Article'], $articlesOrder['ArticlesOrder'], $debug);                            foreach ($articlesOrder['Cart'] as $cart)                                $this->__statCartInsert($user, $cart['Cart'], $articlesOrder['ArticlesOrder'], $debug);                        } // loop articlesOrder)                        $this->__deleteOrder($user, $result['Order'], $debug);                        $this->__deleteDelivery($user, $result['Delivery'], $debug);                    } // foreach($results['RequestPaymentOrder'] as $result)	                    /*                     * cancellazione RequestPayment                     * 		TRIGGER                     * 			k_summary_payments                     * 			k_request_payments_generics                     * 			k_request_payments_orders                     * 			k_request_payments_storerooms                     */                    $RequestPayment->id = $request_payment_id;                    if ($RequestPayment->delete())                        if ($debug)                            echo "DELETE RequestPayment id " . $request_payment_id . " OK \n";                        else                        if ($debug)                            echo "DELETE RequestPayment id " . $request_payment_id . " ERRORE\n";                } // foreach($requestPaymentResults as $requestPaymentResult) 			        } catch (Exception $e) {            if ($debug)                echo '<br />Statitics::archiveStatistics()<br />' . $e;        }    }    /*     * estraggo le rechieste di pagamento da cancellare (quelle CLOSE) RequestPayment.stato_elaborazione = CLOSE (portate a CLOSE da Cron::requestPaymentStatoElaborazione)     */    private function __getRequestPaymentsArchivePayToDeliveryPost($user, $organization_id, $debug) {        App::import('Model', 'RequestPayment');        $RequestPayment = new RequestPayment;        $options = array();        $options['conditions'] = array('RequestPayment.organization_id' => (int) $organization_id,            'RequestPayment.stato_elaborazione' => 'CLOSE',            'DATE(RequestPayment.stato_elaborazione_date) <= CURDATE()-' . Configure::read('GGArchiveStatics'));        $options['fields'] = array('RequestPayment.id');        $options['recursive'] = -1;        $results = $RequestPayment->find('all', $options);        if ($debug)            echo " trovate " . count($results) . " richieste di pagamento \n";        return $results;    }    /*     * estraggo i dettagli di una richiesta di pagamento     * 	- ordini associati     *  - voci di spesa generica     *  - dispensa     */    public function getAllDetailsToStatistic($user, $request_payment_id, $conditions = array(), $debug = false) {        App::import('Model', 'RequestPayment');        $RequestPayment = new RequestPayment;        $results = array();        try {            /*             * REQUEST_PAYMENT             */            $conditionsLocal = array('RequestPayment.organization_id' => $user->organization['Organization']['id'],                'RequestPayment.id' => $request_payment_id);            $requestResults = $RequestPayment->find('first', array('conditions' => $conditionsLocal, 'recursive' => -1));            $results = $requestResults;            /*             * REQUEST_PAYMENT_ORDER, ordini associati             */            $sql = "SELECT						Delivery.id, Delivery.organization_id, Delivery.luogo, Delivery.data,						`Order`.organization_id, `Order`.delivery_id, `Order`.id, `Order`.supplier_organization_id, `Order`.data_inizio, `Order`.data_fine,						 `Order`.tesoriere_fattura_importo, `Order`.tesoriere_doc1, `Order`.tesoriere_data_pay, `Order`.tesoriere_importo_pay, `Order`.tot_importo   					FROM						" . Configure::read('DB.prefix') . "request_payments_orders as RequestPaymentsOrder,						" . Configure::read('DB.prefix') . "deliveries as Delivery,						" . Configure::read('DB.prefix') . "orders as `Order` 					WHERE						RequestPaymentsOrder.organization_id = " . (int) $user->organization['Organization']['id'] . "						and Delivery.organization_id = " . (int) $user->organization['Organization']['id'] . "					    and `Order`.organization_id = " . (int) $user->organization['Organization']['id'] . "					    and RequestPaymentsOrder.order_id = `Order`.id					    and `Order`.delivery_id = Delivery.id						and Delivery.isVisibleBackOffice = 'Y'					    and `Order`.isVisibleBackOffice = 'Y'					    and RequestPaymentsOrder.request_payment_id = " . $results['RequestPayment']['id'] . "					ORDER BY						Delivery.data asc, `Order`.data_inizio, `Order`.data_fine					";            if ($debug)                echo '<br />' . $sql;            $orderResults = $RequestPayment->query($sql);            $results['RequestPaymentOrder'] = $orderResults;            foreach ($orderResults as $numRow => $orderResult) {                $sql = "SELECT						ArticlesOrder.organization_id, ArticlesOrder.name, ArticlesOrder.article_organization_id, ArticlesOrder.order_id, ArticlesOrder.article_id, ArticlesOrder.prezzo,						Article.name, Article.codice, Article.qta, Article.um, Article.um_riferimento 					FROM						" . Configure::read('DB.prefix') . "articles_orders as ArticlesOrder,						" . Configure::read('DB.prefix') . "articles as Article 					WHERE					    ArticlesOrder.organization_id = " . (int) $user->organization['Organization']['id'] . "					    and Article.organization_id = " . (int) $user->organization['Organization']['id'] . "					    and ArticlesOrder.article_id = Article.id					    and ArticlesOrder.order_id = " . $orderResult['Order']['id'] . "					ORDER BY						ArticlesOrder.order_id, ArticlesOrder.article_id					";                if ($debug)                    echo '<br />' . $sql;                $articlesOrderResults = $RequestPayment->query($sql);                $results['RequestPaymentOrder'][$numRow]['ArticlesOrder'] = $articlesOrderResults;                foreach ($articlesOrderResults as $numRow2 => $articlesOrderResult) {                    $sql = "SELECT								Cart.organization_id, Cart.article_organization_id, Cart.order_id, Cart.article_id, Cart.user_id, 								Cart.qta, Cart.qta_forzato , Cart.importo_forzato							FROM								" . Configure::read('DB.prefix') . "carts as Cart							WHERE							    Cart.organization_id = " . (int) $user->organization['Organization']['id'] . "							    and Cart.order_id = " . $articlesOrderResult['ArticlesOrder']['order_id'] . "							    and Cart.article_id = " . $articlesOrderResult['ArticlesOrder']['article_id'] . "							ORDER BY								Cart.order_id, Cart.article_id							";                    if ($debug)                        echo '<br />' . $sql;                    $cartResults = $RequestPayment->query($sql);                    $results['RequestPaymentOrder'][$numRow]['ArticlesOrder'][$numRow2]['Cart'] = $cartResults;                }            }            /*             * SUMMARY_PAYMENT, importo (come somma degli importi di tutti gli ordini) che ogni utente deve pagare             */            $sql = "SELECT						User.id, User.name, User.username, User.email,					 	SummaryPayment.id, SummaryPayment.request_payment_id, SummaryPayment.stato, SummaryPayment.importo_dovuto, SummaryPayment.importo_pagato, SummaryPayment.modalita					FROM						" . Configure::read('DB.portalPrefix') . "users as User,						" . Configure::read('DB.prefix') . "summary_payments as SummaryPayment					WHERE						SummaryPayment.organization_id = " . (int) $user->organization['Organization']['id'] . "						and User.organization_id = " . (int) $user->organization['Organization']['id'] . "						and User.id = SummaryPayment.user_id						and SummaryPayment.request_payment_id = " . $results['RequestPayment']['id'];            if (isset($conditions['SummaryPayment.stato']))                $sql .= " AND SummaryPayment.stato = '" . $conditions['SummaryPayment.stato'] . "'";            if (isset($conditions['User.name']))                $sql .= " AND User.name = '" . $conditions['User.name'] . "'";            $sql .= " ORDER BY " . Configure::read('orderUser');            if ($debug)                echo '<br />' . $sql;            $summaryPaymentResults = $RequestPayment->query($sql);            $results['SummaryPayment'] = $summaryPaymentResults;            /*             * ctrl configurazione Organization             */            $requestPaymentsStoreroomResults = array();            if ($user->organization['Organization']['hasStoreroom'] == 'Y' && $user->organization['Organization']['hasStoreroomFrontEnd'] == 'Y') {                /*                 * ottento informazioni su eventuali RequestPaymentsStoreroom                 */                App::import('Model', 'RequestPaymentsStoreroom');                $RequestPaymentsStoreroom = new RequestPaymentsStoreroom;                $conditionsLocal = array('RequestPaymentsStoreroom.organization_id' => (int) $user->organization['Organization']['id'],                    'RequestPaymentsStoreroom.request_payment_id' => $results['RequestPayment']['id']);                $requestPaymentsStoreroomResults = $RequestPaymentsStoreroom->find('all', array('conditions' => $conditionsLocal, 'order' => 'Delivery.data ASC', 'recursive' => 1));                $results['Storeroom'] = $requestPaymentsStoreroomResults;            }            /*             * ottento informazioni su eventuali RequestPaymentsGeneric             */            App::import('Model', 'RequestPaymentsGeneric');            $RequestPaymentsGeneric = new RequestPaymentsGeneric;            $conditionsLocal = array('RequestPaymentsGeneric.organization_id' => (int) $user->organization['Organization']['id'],                'RequestPaymentsGeneric.request_payment_id' => $results['RequestPayment']['id']);            $requestPaymentsGenericResults = $RequestPaymentsGeneric->find('all', array('conditions' => $conditionsLocal, 'order' => 'RequestPaymentsGeneric.created ASC', 'recursive' => 1));            $results['PaymentsGeneric'] = $requestPaymentsGenericResults;        } catch (Exception $e) {            CakeLog::write('error', $sql);            CakeLog::write('error', $e);        }        return $results;    }    private function __statDeliveryInsert($user, $delivery, $debug) {        try {            App::import('Model', 'StatDelivery');            $StatDelivery = new StatDelivery;            $dataDelivery = array();            $dataDelivery['StatDelivery']['id'] = $delivery['id'];            $dataDelivery['StatDelivery']['organization_id'] = $delivery['organization_id'];            $dataDelivery['StatDelivery']['luogo'] = $delivery['luogo'];            $dataDelivery['StatDelivery']['data'] = $delivery['data'];            if (!$StatDelivery->save($dataDelivery)) {                if ($debug)                    echo "ERRORE StatDelivery::save() \n" . print_r($dataDelivery);                return;            } else                echo "\nINSERT StatDelivery " . $delivery['id'] . " data " . $dataDelivery['StatDelivery']['data'] . " " . $dataDelivery['StatDelivery']['luogo'] . " \n";        } catch (Exception $e) {            echo '<br />Statitics::__statDeliveryInsert()<br />' . $e;        }    }    private function __statOrderInsert($user, $order, $debug) {        try {            /*             * dati produttore             */            App::import('Model', 'SuppliersOrganization');            $SuppliersOrganization = new SuppliersOrganization;            $SuppliersOrganization->unbindModel(array('hasMany' => array('Article', 'Order', 'SuppliersOrganizationsReferent')));            $SuppliersOrganization->unBindModel(array('belongsTo' => array('Organization', 'CategoriesSupplier')));            $options = array();            $options['conditions'] = array('SuppliersOrganization.organization_id' => (int) $order['organization_id'],                'SuppliersOrganization.id' => $order['supplier_organization_id']);            $options['order'] = array('SuppliersOrganization.name', 'Supplier.id', 'Supplier.img1');            $options['recursive'] = 1;            $suppliersOrganizationsResults = $SuppliersOrganization->find('first', $options);            $supplier_img1 = '';            if (!empty($suppliersOrganizationsResults)) {                $supplier_organization_name = $suppliersOrganizationsResults['SuppliersOrganization']['name'];                $supplier_img1 = $suppliersOrganizationsResults['Supplier']['img1'];            }            App::import('Model', 'Order');            $Order = new Order;            App::import('Model', 'StatOrder');            $StatOrder = new StatOrder;            $dataOrder = array();            $dataOrder['StatOrder']['id'] = $order['id'];            $dataOrder['StatOrder']['organization_id'] = $order['organization_id'];            $dataOrder['StatOrder']['supplier_organization_id'] = $order['supplier_organization_id'];            $dataOrder['StatOrder']['supplier_organization_name'] = $supplier_organization_name;            $dataOrder['StatOrder']['supplier_img1'] = $supplier_img1;            $dataOrder['StatOrder']['stat_delivery_id'] = $order['delivery_id'];            $dataOrder['StatOrder']['data_inizio'] = $order['data_inizio'];            $dataOrder['StatOrder']['data_fine'] = $order['data_fine'];            /*             * dati fattura             */            $dataOrder['StatOrder']['tesoriere_fattura_importo'] = $order['tesoriere_fattura_importo'];            $dataOrder['StatOrder']['tesoriere_doc1'] = $order['tesoriere_doc1'];            $dataOrder['StatOrder']['tesoriere_data_pay'] = $order['tesoriere_data_pay'];            $dataOrder['StatOrder']['tesoriere_importo_pay'] = $order['tesoriere_importo_pay'];            /*             * calcolo il totale degli importi degli acquisti dell'ordine             */            if (empty($order['tot_importo']) || $order['tot_importo'] == '0.00')                $importo_totale = $Order->getTotImporto($user, $order['id'], $debug);            else                $importo_totale = $order['tot_importo'];            $dataOrder['StatOrder']['importo'] = $importo_totale;            if ($debug) {                echo "<pre>";                print_r($dataOrder);                echo "</pre>";            }            if (!$StatOrder->save($dataOrder)) {                echo "ERRORE StatOrder::save() \n" . print_r($dataOrder);                return;            } else                echo "INSERT StatOrder " . $order['id'] . " - data ini " . $order['data_inizio'] . " e data fine " . $order['data_fine'] . ", produttore " . $supplier_organization_name . " (" . $order['supplier_organization_id'] . ") con importo totale " . $dataOrder['StatOrder']['importo'] . ", fattura " . $dataOrder['StatOrder']['tesoriere_doc1'] . "\n";        } catch (Exception $e) {            if ($debug)                echo '<br />Statitics::__statOrderInsert()<br />' . $e;        }    }    private function __statArticlesOrderInsert($user, $article, $articlesOrder, $debug) {        try {            App::import('Model', 'StatArticlesOrder');            $StatArticlesOrder = new StatArticlesOrder;            $dataArticlesOrder = array();            $dataArticlesOrder['StatArticlesOrder']['organization_id'] = $articlesOrder['organization_id'];            $dataArticlesOrder['StatArticlesOrder']['article_organization_id'] = $articlesOrder['article_organization_id'];            $dataArticlesOrder['StatArticlesOrder']['article_id'] = $articlesOrder['article_id'];            $dataArticlesOrder['StatArticlesOrder']['stat_order_id'] = $articlesOrder['order_id'];            $dataArticlesOrder['StatArticlesOrder']['prezzo'] = $articlesOrder['prezzo'];            $dataArticlesOrder['StatArticlesOrder']['name'] = $articlesOrder['name'];            $dataArticlesOrder['StatArticlesOrder']['codice'] = $article['codice'];            $dataArticlesOrder['StatArticlesOrder']['qta'] = $article['qta'];            if (!empty($article['um']))                $dataArticlesOrder['StatArticlesOrder']['um'] = $article['um'];            else                $dataArticlesOrder['StatArticlesOrder']['um'] = 'PZ';            if (!empty($article['um_riferimento']))                $dataArticlesOrder['StatArticlesOrder']['um_riferimento'] = $article['um_riferimento'];            else                $dataArticlesOrder['StatArticlesOrder']['um_riferimento'] = 'PZ';            if ($debug) {                echo "<pre>";                print_r($dataArticlesOrder);                echo "</pre>";            }            if (!$StatArticlesOrder->save($dataArticlesOrder)) {                echo "ERRORE StatArticlesOrder::save() \n" . print_r($dataArticlesOrder);                return;            } else                echo "INSERT StatArticlesOrder, order_id " . $articlesOrder['order_id'] . " - article_id " . $articlesOrder['article_id'] . " \n";        } catch (Exception $e) {            if ($debug)                echo '<br />Statitics::__statArticlesOrderInsert()<br />' . $e;        }    }    private function __statCartInsert($user, $cart, $articlesOrder, $debug) {        try {            App::import('Model', 'StatCart');            $StatCart = new StatCart;            $dataCart = array();            $dataCart['StatCart']['organization_id'] = $cart['organization_id'];            ;            $dataCart['StatCart']['stat_order_id'] = $cart['order_id'];            $dataCart['StatCart']['article_organization_id'] = $cart['article_organization_id'];            $dataCart['StatCart']['article_id'] = $cart['article_id'];            $dataCart['StatCart']['user_id'] = $cart['user_id'];            /*             * importo e qta             */            if ($cart['qta_forzato'] > 0) {                $qta = $cart['qta_forzato'];            } else                $qta = $cart['qta'];            if ($cart['importo_forzato'] == 0) {                if ($cart['qta_forzato'] > 0)                    $importo = ($cart['qta_forzato'] * $articlesOrder['prezzo']);                else                    $importo = ($cart['qta'] * $articlesOrder['prezzo']);            } else                $importo = $cart['importo_forzato'];            $dataCart['StatCart']['qta'] = $qta;            $dataCart['StatCart']['importo'] = $importo;            if ($debug) {                echo "<pre>";                print_r($dataCart);                echo "</pre>";            }            if (!$StatCart->save($dataCart)) {                echo "ERRORE StatCart::save() \n" . print_r($dataCart);                return;            } else                echo "INSERT StatCart user " . $dataCart['StatCart']['user_id'] . " con articolo ID " . $cart['article_organization_id'] . "-" . $cart['article_id'] . " \n";        } catch (Exception $e) {            if ($debug)                echo '<br />Statitics::__statCartInsert()<br />' . $e;        }    }    /*     * cancellazione Order     * 		TRIGGER      * 			 k_summary_orders     * 			 k_articles_orders     * 				TRIGGER     * 				k_carts     * 			 k_request_payments_orders     */    private function __deleteOrder($user, $order, $debug) {        App::import('Model', 'Order');        $Order = new Order;        $Order->id = $order['id'];        if ($Order->delete())            echo "DELETE Order " . $order['id'] . " OK \n";        else            echo "DELETE Order " . $order['id'] . " ERROE\n";    }    /*     * cancellazione Delivery, se non ha + ordini associati     */    private function __deleteDelivery($user, $delivery, $debug) {        App::import('Model', 'Order');        $Order = new Order;        $options = array();        $options['conditions'] = array('Order.organization_id' => $delivery['organization_id'],            'Order.delivery_id' => $delivery['id']);        $options['recursive'] = -1;        $totOrders = $Order->find('count', $options);        if ($totOrders == 0) {            App::import('Model', 'Delivery');            $Delivery = new Delivery;            $Delivery->id = $delivery['id'];            if ($Delivery->delete())                echo "DELETE Delivery " . $delivery['id'] . " OK \n";            else                echo "DELETE Delivery " . $delivery['id'] . " ERROE\n";        }    }    private function __createPdfUserDelivery($user, $delivery, $debug) {        $tmp_user->organization['Organization']['id'] = $delivery['organization_id'];        $delivery_id = $delivery['id'];        $delivery_data = $delivery['data'];        App::import('Model', 'Delivery');        $Delivery = new Delivery;        App::import('Model', 'Cart');        $Cart = new Cart;        App::import('Model', 'User');        $User = new User;        App::import('Model', 'PdfCart');        App::import('Model', 'PdfCartsOrder');        $conditions = array('Delivery.id' => $delivery_id);        $orderBy = Configure::read('orderUser');        $userResults = $User->getUserWithCartByDelivery($tmp_user, $conditions, $orderBy, 'CRON');        if ($debug)            echo "\r __createPdfUserDelivery() per consegna " . $delivery_data . " (" . $delivery_id . "): trovati " . count($userResults) . " users che hanno effettuato acquisti";        foreach ($userResults as $numResult => $userResult) {                        $tot_importo = 0;            $user_id = $userResult['User']['id'];            if ($debug)                echo "\rTratto user " . $userResult['User']['name'] . " (" . $userResult['User']['id'] . ")";            //$results = $Cart->getUserCart($tmp_user, $user_id, $delivery_id, $debug);            $Delivery = new Delivery;            $conditions = array('Delivery' => array('Delivery.isVisibleBackOffice' => 'Y',                    'Delivery.id' => (int) $delivery_id),                'Cart' => array('Cart.user_id' => (int) $userResult['User']['id'],                    'Cart.deleteToReferent' => 'N'));            $options = array('orders' => true, 'storerooms' => false, 'summaryOrders' => false,                'articoliDellUtenteInOrdine' => true, // estraggo SOLO gli articoli acquistati da un utente in base all'ordine                'suppliers' => true, 'referents' => false);            if ($debug) {                echo "\n<pre>Cart::getUserCart() \n";                print_r($conditions);                echo "</pre>";            }            $results = $Delivery->getDataWithoutTabs($user, $conditions, $options);            if ($debug)                echo "\rTotale acquisti per lo user " . $userResult['User']['name'] . " (" . $userResult['User']['id'] . "): " . count($results);            $resultsWithModifies = array();            if (isset($results['Delivery']))                foreach ($results['Delivery'] as $numDelivery => $result['Delivery']) {                    if ($result['Delivery']['totOrders'] > 0 && $result['Delivery']['totArticlesOrder'] > 0) {                        foreach ($result['Delivery']['Order'] as $numOrder => $order) {                            $resultsSummaryOrderVarius = $Cart->addSummaryOrder($this->user, $user_id, $order);                            $resultsWithModifies[$order['Order']['id']]['SummaryOrder'] = $resultsSummaryOrderVarius['SummaryOrder'];                            $resultsWithModifies[$order['Order']['id']]['SummaryOrderTrasport'] = $resultsSummaryOrderVarius['SummaryOrderTrasport'];                            $resultsWithModifies[$order['Order']['id']]['SummaryOrderCostMore'] = $resultsSummaryOrderVarius['SummaryOrderCostMore'];                            $resultsWithModifies[$order['Order']['id']]['SummaryOrderCostLess'] = $resultsSummaryOrderVarius['SummaryOrderCostLess'];                        } // loops Orders                    }                } // loops Deliveries	                   /*                  echo "<pre>";                  print_r($resultsWithModifies);                  echo "</pre>";                 */            /*             * view user_cart             */            $output = new XTCPDF($tmp_user->organization, PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);            $output->headerText = "Consegna del " . $this->__translateData($delivery_data);            // add a page            $output->AddPage();            $css = $output->getCss();            if (isset($results['Delivery'])) {                foreach ($results['Delivery'] as $numDelivery => $result['Delivery']) {                    $html = '<div class="h1Pdf">' . __('Delivery') . ' ';                    if ($delivery['sys'] == 'N')                        $html .= $delivery['luogoData'];                    else                        $html .= $delivery['luogo'];                    $html .= '</div>';                    $output->writeHTML($css . $html, $ln = true, $fill = false, $reseth = true, $cell = true, $align = '');                    if ($result['Delivery']['totOrders'] > 0 && $result['Delivery']['totArticlesOrder'] > 0) {                        $tot_importo = 0;  /* il totale di tutta la consegna */                        $tot_importo_cost_less = 0;                        $tot_importo_trasport = 0;                        $tot_importo_cost_more = 0;                        $array_suppliers_organizations = array();                        foreach ($result['Delivery']['Order'] as $numOrder => $order) {                            if (isset($order['ArticlesOrder'])) { // cosi' escludo gli ordini senza acquisti                                $array_suppliers_organizations[$numOrder]['id'] = $order['SuppliersOrganization']['id'];                                $array_suppliers_organizations[$numOrder]['name'] = $order['SuppliersOrganization']['name'];                                $array_suppliers_organizations[$numOrder]['supplier_id'] = $order['SuppliersOrganization']['supplier_id'];                                $array_suppliers_organizations[$numOrder]['supplier_img1'] = $order['SuppliersOrganization']['img1'];                                $html = '<div class="h2Pdf">' . __('Supplier') . ' ' . $order['SuppliersOrganization']['name'] . ', ' . $order['SuppliersOrganization']['descrizione'] . '</div>';                                $output->writeHTML($css . $html, $ln = false, $fill = false, $reseth = true, $cell = true, $align = '');                                $html = '';                                $html .= '	<table cellpadding="0" cellspacing="0">';                                $html .= '	<thead>'; // con questo TAG mi ripete l'intestazione della tabella                                $html .= '		<tr>';                                $html .= '			<th width="' . $output->getCELLWIDTH20() . '">' . __('N') . '</th>';                                $html .= '			<th width="' . $output->getCELLWIDTH30() . '">' . __('Bio') . '</th>';                                $html .= '			<th width="' . ($output->getCELLWIDTH300() + $output->getCELLWIDTH20()) . '">' . __('Name') . '</th>';                                $html .= '			<th width="' . $output->getCELLWIDTH50() . '" style="text-align:center;">' . __('qta') . '</th>';                                $html .= '			<th width="' . $output->getCELLWIDTH70() . '" style="text-align:center;">&nbsp;' . __('PrezzoUnita') . '</th>';                                $html .= '			<th width="' . $output->getCELLWIDTH70() . '">' . __('Prezzo/UM') . '</th>';                                $html .= '			<th width="' . $output->getCELLWIDTH70() . '" style="text-align:right;">' . __('Importo') . '</th>';                                $html .= '	</tr>';                                $html .= '	</thead><tbody>';                                $tot_qta = 0;                                $tot_importo_sub = 0;  /* il totale di un ordine */                                foreach ($order['ArticlesOrder'] as $numArticlesOrder => $articlesOrder) {                                    $name = $order['ArticlesOrder'][$numArticlesOrder]['name'] . ' ' . $this->__getArticleConf($order['Article'][$numArticlesOrder]['qta'], $order['Article'][$numArticlesOrder]['um']);                                    /*                                     * gestione qta e importi                                     * */                                    if ($order['Cart'][$numArticlesOrder]['qta_forzato'] > 0) {                                        $qta = $order['Cart'][$numArticlesOrder]['qta_forzato'];                                        $qta_modificata = true;                                    } else {                                        $qta = $order['Cart'][$numArticlesOrder]['qta'];                                        $qta_modificata = false;                                    }                                    $importo_modificato = false;                                    if ($order['Cart'][$numArticlesOrder]['importo_forzato'] == 0) {                                        if ($order['Cart'][$numArticlesOrder]['qta_forzato'] > 0)                                            $importo = ($order['Cart'][$numArticlesOrder]['qta_forzato'] * $order['ArticlesOrder'][$numArticlesOrder]['prezzo']);                                        else {                                            $importo = ($order['Cart'][$numArticlesOrder]['qta'] * $order['ArticlesOrder'][$numArticlesOrder]['prezzo']);                                        }                                    } else {                                        $importo = $order['Cart'][$numArticlesOrder]['importo_forzato'];                                        $importo_modificato = true;                                    }                                    $tot_qta += $qta;                                    $tot_importo_sub += $importo;                                    $importo = number_format($importo, 2, Configure::read('separatoreDecimali'), Configure::read('separatoreMigliaia'));                                    $html .= '<tr>';                                    $html .= '	<td width="' . $output->getCELLWIDTH20() . '">' . ($numArticlesOrder + 1) . '</td>';                                    $html .= '	<td width="' . $output->getCELLWIDTH30() . '">';                                    if ($order['Article'][$numArticlesOrder]['bio'] == 'Y')                                        $html .= 'Bio';                                    $html .= '</td>';                                    $html .= '<td width="' . ($output->getCELLWIDTH300() + $output->getCELLWIDTH20()) . '">' . $name . '</td>';                                    $html .= '<td width="' . $output->getCELLWIDTH50() . '" style="text-align:center;">' . $qta . '</td>';  // $this->App->traslateQtaImportoModificati($qta_modificata)                                    $html .= '<td width="' . $output->getCELLWIDTH70() . '" style="text-align:center;">' . $order['ArticlesOrder'][$numArticlesOrder]['prezzo_e'] . '</td>';                                    $html .= '<td width="' . $output->getCELLWIDTH70() . '">' . $this->utilsCommons->getArticlePrezzoUM($order['ArticlesOrder'][$numArticlesOrder]['prezzo'], $order['Article'][$numArticlesOrder]['qta'], $order['Article'][$numArticlesOrder]['um'], $order['Article'][$numArticlesOrder]['um_riferimento']) . '</td>';                                    $html .= '<td width="' . $output->getCELLWIDTH70() . '" style="text-align:right;">';                                    $html .= $importo . '&nbsp;&euro;'; // $this->App->traslateQtaImportoModificati($importo_modificato);                                    $html .= '</td>';                                    $html .= '</tr>';                                }  // end ciclo ArticlesOrder                                $tot_importo += $tot_importo_sub;                                $html .= '<tr>';                                $html .= '	<th></th>';                                $html .= '	<th colspan="2" style="text-align:right;">Quantit&agrave;&nbsp;totale&nbsp;</th>';                                $html .= '	<th style="text-align:center;">&nbsp;' . $tot_qta . '</th>';                                $html .= '	<th colspan="3" style="text-align:right;">Importo totale&nbsp;' . number_format($tot_importo_sub, 2, Configure::read('separatoreDecimali'), Configure::read('separatoreMigliaia')) . '&nbsp;&euro;</th>';                                $html .= '</tr>';                                /*                                 * ctrl se ci sono variazioni in                                 *                                 * SummaryOrder                                 * SummaryOrderTrasport                                 * SummaryOrderCostMore                                 * SummaryOrderCostLess                                 *                                 * $resultsWithModifies[order_id][SummaryOrder][0][SummaryOrder][importo] e' la somma di SummaryOrderTrasport + SummaryOrderCostMore + SummaryOrderCostLess                                 */                                if (array_key_exists($order['Order']['id'], $resultsWithModifies)) {                                    $resultsWithModifiesOrder = $resultsWithModifies[$order['Order']['id']];                                    /*                                      echo "<pre>";                                      print_r($resultsWithModifiesOrder);                                      echo "</pre>";                                     */                                    if (isset($resultsWithModifiesOrder['SummaryOrderTrasport'][0])) {                                        $importo_trasport = $resultsWithModifiesOrder['SummaryOrderTrasport'][0]['SummaryOrderTrasport']['importo_trasport'];                                        // echo '<br />importo_trasport '.$importo_trasport;                                        if ($importo_trasport > 0) {                                            $html .= '<tr>';                                            $html .= '	<th></th>';                                            $html .= '	<th colspan="2" style="text-align:right;"></th>';                                            $html .= '	<th style="text-align:center;"></th>';                                            $html .= '	<th colspan="3" style="text-align:right;">Trasporto&nbsp;&nbsp;' . number_format($importo_trasport, 2, Configure::read('separatoreDecimali'), Configure::read('separatoreMigliaia')) . '&nbsp;&euro;</th>';                                            $html .= '</tr>';                                        }                                        $tot_importo_trasport += $importo_trasport;                                        // echo '<br />tot_importo_trasport '.$tot_importo_trasport;                                    }                                    if (isset($resultsWithModifiesOrder['SummaryOrderCostMore'][0])) {                                        $importo_cost_more = $resultsWithModifiesOrder['SummaryOrderCostMore'][0]['SummaryOrderCostMore']['importo_cost_more'];                                        if ($importo_cost_more > 0) {                                            $html .= '<tr>';                                            $html .= '	<th></th>';                                            $html .= '	<th colspan="2" style="text-align:right;"></th>';                                            $html .= '	<th style="text-align:center;"></th>';                                            $html .= '	<th colspan="3" style="text-align:right;">Costo aggiuntivo&nbsp;&nbsp;' . number_format($importo_cost_more, 2, Configure::read('separatoreDecimali'), Configure::read('separatoreMigliaia')) . '&nbsp;&euro;</th>';                                            $html .= '</tr>';                                        }                                        $tot_importo_cost_more += $importo_cost_more;                                    }                                    if (isset($resultsWithModifiesOrder['SummaryOrderCostLess'][0])) {                                        $importo_cost_less = $resultsWithModifiesOrder['SummaryOrderCostLess'][0]['SummaryOrderCostLess']['importo_cost_less'];                                        if ($importo_cost_less != 0) {                                            $html .= '<tr>';                                            $html .= '	<th></th>';                                            $html .= '	<th colspan="2" style="text-align:right;"></th>';                                            $html .= '	<th style="text-align:center;"></th>';                                            $html .= '	<th colspan="3" style="text-align:right;">Sconto&nbsp;&nbsp;' . number_format($importo_cost_less, 2, Configure::read('separatoreDecimali'), Configure::read('separatoreMigliaia')) . '&nbsp;&euro;</th>';                                            $html .= '</tr>';                                        }                                        $tot_importo_cost_less += $importo_cost_less;                                    }                                    if (isset($resultsWithModifiesOrder['SummaryOrder'][0])) {                                        $importo = $resultsWithModifiesOrder['SummaryOrder'][0]['SummaryOrder']['importo'];                                        // echo '<br />importo '.$importo;                                        if ($importo > 0) {                                            $html .= '<tr>';                                            $html .= '	<th></th>';                                            $html .= '	<th colspan="6" style="text-align:right;">';                                            if ($importo_trasport == 0 && $importo_cost_less == 0 && $importo_cost_more == 0) {                                                $html .= 'Totale dell\'ordine&nbsp;modificato&nbsp;dal&nbsp;referente&nbsp;';                                                /*                                                 * l'importo dell'ordine e' stato modificato con l'aggregazione dei dati, tolgo il vecchio e agginugo il nuovo                                                 */                                                $tot_importo = ($tot_importo - $tot_importo_sub + $importo);                                            } else                                                $html .= 'Totale dell\'ordine&nbsp;&nbsp;';                                            $html .= number_format($importo, 2, Configure::read('separatoreDecimali'), Configure::read('separatoreMigliaia')) . '&nbsp;&euro;</th>';                                            $html .= '</tr>';                                            $array_suppliers_organizations[$numOrder]['order_importo'] = $importo;                                        }                                    }                                    else {                                        $array_suppliers_organizations[$numOrder]['order_importo'] = $tot_importo_sub;                                    }                                }                                $html .= '</tbody></table>';                                $output->writeHTML($css . $html, $ln = true, $fill = false, $reseth = true, $cell = true, $align = '');                            }  // end if(isset($order['ArticlesOrder']))  	                        }  // end foreach($result['Delivery']['Order'] as $numOrder => $order)                        /*                         * totale importo della consegna                         */                        $tot_importo = ($tot_importo + $tot_importo_trasport + ($tot_importo_cost_less) + $tot_importo_cost_more);                        $html = '';                        $html .= '	<table cellpadding="0" cellspacing="0">';                        $html .= '	<tbody>';                        $html .= '<tr>';                        $html .= '	<td colspan="7"></td>';                        $html .= '</tr>';                        $html .= '<tr>';                        $html .= '	<th colspan="7" style="text-align:right;">';                        $html .= number_format($tot_importo, 2, Configure::read('separatoreDecimali'), Configure::read('separatoreMigliaia')) . '&nbsp;&euro;';                        $html .= '</th>';                        $html .= '</tr>';                        $html .= '</tbody></table>';                        $output->writeHTML($css . $html, $ln = true, $fill = false, $reseth = true, $cell = true, $align = '');                    } else {                        if ($storeroomResults['Delivery'][$numDelivery]['totStorerooms'] == 0) {                            $html = '<div class="h4PdfNotFound">' . __('export_docs_not_found') . '</div>';                            $output->writeHTMLCell(0, 0, 15, 40, $css . $html, $border = 0, $ln = true, $fill = false, $reseth = true, $cell = true, $align = '');                        }                    }                } // end foreach($results['Delivery'] as $numDelivery => $result['Delivery'])                 $html = '';                $html = $output->getLegenda();                $output->writeHTML($css . $html, $ln = true, $fill = false, $reseth = true, $cell = true, $align = '');                // reset pointer to the last page                $output->lastPage();                $fileData['fileName'] = uniqid();                /*                 * scrivo fisicamente il file                 */                $path = $this->__directoryTargetUserPdf($delivery['organization_id'], $user_id, $debug);                if ($debug)                    echo "\r Scrivo il file $path" . DS . $fileData['fileName'] . '.pdf';                $output->Output($path . DS . $fileData['fileName'] . '.pdf', 'F');                $output = null;                /*                 * scrivo sul db                 */                $PdfCart = new PdfCart;                $data = array();                $data['PdfCart']['organization_id'] = $delivery['organization_id'];                $data['PdfCart']['user_id'] = $user_id;                $data['PdfCart']['uuid'] = $fileData['fileName'];                $data['PdfCart']['name'] = $this->__translateData($delivery_data);                $data['PdfCart']['delivery_id'] = $delivery['id'];                $data['PdfCart']['delivery_data'] = $delivery_data;                $data['PdfCart']['delivery_luogo'] = $delivery['luogo'];                $data['PdfCart']['delivery_importo'] = $tot_importo;                /*                  echo "<pre>PdfCart \n ";                  print_r($data);                  echo "</pre>";                 */                if (!$PdfCart->save($data)) {                    if ($debug) {                        echo "\n <pre>ERRORE PdfCart::save() \n";                        print_r($data);                        echo "</pre>";                    }                }                $pdf_cart_id = $PdfCart->getLastInsertId();                /*                  echo "<pre>";                  print_r($array_suppliers_organizations);                  echo "</pre>";                 */                 if(!empty($array_suppliers_organizations))                foreach ($array_suppliers_organizations as $array_suppliers_organization) {                    $PdfCartsOrder = new PdfCartsOrder;                    $data = array();                    $data['PdfCartsOrder']['organization_id'] = $delivery['organization_id'];                    $data['PdfCartsOrder']['user_id'] = $user_id;                    $data['PdfCartsOrder']['pdf_cart_id'] = $pdf_cart_id;                    $data['PdfCartsOrder']['supplier_id'] = $array_suppliers_organization['supplier_id'];                    $data['PdfCartsOrder']['supplier_img1'] = $array_suppliers_organization['supplier_img1'];                    $data['PdfCartsOrder']['supplier_organizations_id'] = $array_suppliers_organization['id'];                    $data['PdfCartsOrder']['supplier_organizations_name'] = $array_suppliers_organization['name'];                    $data['PdfCartsOrder']['order_importo'] = $array_suppliers_organization['order_importo'];                    /*                      echo "<pre>PdfCartsOrder \n";                      print_r($data);                      echo "</pre>";                     */                    if (!$PdfCartsOrder->save($data)) {                        if ($debug) {                            echo "\n <pre>ERRORE PdfCartsOrder::save() \n";                            print_r($data);                            echo "</pre>";                        }                    }                }                $array_suppliers_organizations = array();            }            /*              if($numResult==2)              exit;             */        } // loop user    }    private function __translateData($data) {        if (!empty($data))            $data = date('d', strtotime($data)) . '/' . date('m', strtotime($data)) . '/' . date('Y', strtotime($data));        return $data;    }    /*     * ctrl se la direcotry esiste, se no la creo     */    private function __directoryTargetUserPdf($organization_id, $user_id, $debug) {        $path = Configure::read('App.root') . Configure::read('App.img.upload.pdf.carts') . DS . $organization_id . DS . $user_id;        $dir = new Folder($path, true, 0755);        return $path;    }    /*     * code AppHelper     */    private function __getArticleConf($qta, $um) {        /*         * qta, da 1.00 a 1         * 		da 0.75 a 0,75         * */        $qta = str_replace(".", ",", $qta);        if (strpos($qta, ',') !== false) {            $arrCtrlTwoZero = explode(",", $qta);            if ($arrCtrlTwoZero[1] == '00')                $qta = $arrCtrlTwoZero[0];        }        // $um = $this->traslateEnum($um);        $tmp = "";        $tmp .= $qta . '&nbsp;' . $um;        return $tmp;    }    public function create_pdf_single_user($user, $delivery_id, $user_id, $debug = true) {        $delivery_id = '1273';        $user_id = '202';        App::import('Model', 'Delivery');        $Delivery = new Delivery;        App::import('Model', 'Cart');        $Cart = new Cart;        $conditions = array('Delivery' => array('Delivery.isVisibleBackOffice' => 'Y',                'Delivery.id' => (int) $delivery_id),            'Cart' => array('Cart.user_id' => (int) $user_id,                'Cart.deleteToReferent' => 'N'));        $options = array('orders' => true, 'storerooms' => false, 'summaryOrders' => false,            'articoliDellUtenteInOrdine' => true, // estraggo SOLO gli articoli acquistati da un utente in base all'ordine            'suppliers' => true, 'referents' => false);        if ($debug) {            echo "\n <br />organization_id " . $user->organization['Organization']['id'];            echo "\n <br />delivery_id " . $delivery_id;            echo "\n <br />user_id " . $user_id;        }        $results = $Delivery->getDataWithoutTabs($user, $conditions, $options);        if ($debug) {            echo "<pre>Delivery::getDataWithoutTabs() \n";            print_r($results);            echo "</pre>";        }    }}