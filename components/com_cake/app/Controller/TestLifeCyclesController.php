<?phpApp::uses('AppController', 'Controller');class TestLifeCyclesController extends AppController {    public $helpers = ['App',        'Html',        'Form',        'Time',        'Ajax',        'Tabs'];    public function beforeFilter() {        parent::beforeFilter();        /* ctrl ACL */        if (!$this->isRoot()) {            $this->Session->setFlash(__('msg_not_permission'));            $this->myRedirect(Configure::read('routes_msg_stop'));        }    }    public function admin_index() {		/*		 * eventuale filtro order_id		 */		$FilterTestLifeCycleRequestPaymentId = 0; 		$FilterTestLifeCycleOrderId = 0;		$FilterTestLifeCycleOrderStateCode = 'NO-CLOSE';				if($this->Session->check(Configure::read('Filter.prefix').$this->modelClass.'OrderId')) {			$FilterTestLifeCycleOrderId = $this->Session->read(Configure::read('Filter.prefix').$this->modelClass.'OrderId');		}		$this->set(compact('FilterTestLifeCycleOrderId'));				if($this->Session->check(Configure::read('Filter.prefix').$this->modelClass.'RequestPaymentId')) {			$FilterTestLifeCycleRequestPaymentId = $this->Session->read(Configure::read('Filter.prefix').$this->modelClass.'RequestPaymentId');		}		$this->set(compact('FilterTestLifeCycleRequestPaymentId'));				if($this->Session->check(Configure::read('Filter.prefix').$this->modelClass.'OrderStateCode')) {			$FilterTestLifeCycleOrderStateCode = $this->Session->read(Configure::read('Filter.prefix').$this->modelClass.'OrderStateCode');		}		$this->set(compact('FilterTestLifeCycleOrderStateCode'));				$order_state_codes = ['NO-CLOSE' => __('Escludi CLOSE'), 'ALL' => __('ALL')];		$this->set(compact('order_state_codes'));		/*		 * dati GAS		 */		App::import('Model', 'Organization');        $Organization = new Organization;				$options = [];		$options['conditions'] = ['Organization.id' => $this->user->organization['Organization']['id']];		$options['recursive'] = 0;	        $organizationResults = $Organization->find('first', $options);        $paramsConfig = json_decode($organizationResults['Organization']['paramsConfig'], true);        $paramsFields = json_decode($organizationResults['Organization']['paramsFields'], true);        $organizationResults['Organization'] += $paramsConfig;        $organizationResults['Organization'] += $paramsFields;                $this->set(compact('organizationResults'));		self::d($organizationResults, false);		/*		 * legenda profilata		 */		$group_id = Configure::read('group_id_referent');		$orderStatesToLegenda = $this->ActionsOrder->getOrderStatesToLegenda($this->user, $group_id);		$this->set('orderStatesToLegenda', $orderStatesToLegenda);				/*		 * elenco Ordini		 */		        App::import('Model', 'Order');        $Order = new Order();		        App::import('Model', 'RequestPayment');        $RequestPayment = new RequestPayment();	   	App::import('Model', 'Supplier');	   		   	App::import('Model', 'DesOrdersOrganization');				App::import('Model', 'OrderLifeCycle');				$SqlLimit = 75;		$options = [];		$options['conditions'] = ['Delivery.organization_id' => $this->user->organization['Organization']['id'],									  'Order.organization_id' => $this->user->organization['Organization']['id'],									  'Delivery.isVisibleBackOffice' => 'Y',									  'SuppliersOrganization.stato' => 'Y'];		if($FilterTestLifeCycleOrderStateCode=='NO-CLOSE') {			$options['conditions'] += ['Order.state_code != ' => 'CLOSE'];				$options['conditions'] += ['Delivery.stato_elaborazione' => 'OPEN'];			}		$options['recursive'] = 0;		$options['order'] = ['Delivery.data asc', 'Delivery.id', 'Order.data_inizio asc'];		$orderResults = $Order->find('all', $options);				$orderListResults = [];		foreach($orderResults as $numResult => $result) {				$orderListResults[$result['Order']['id']] = $result['Delivery']['luogoData'].' - '.$result['SuppliersOrganization']['name'];						if(empty($FilterTestLifeCycleOrderId) || $FilterTestLifeCycleOrderId==$result['Order']['id']) {				/*				 * Suppliers per l'immagine				 * */				$Supplier = new Supplier;								$options = [];				$options['conditions'] = ['Supplier.id' => $result['SuppliersOrganization']['supplier_id']];				$options['fields'] = ['Supplier.img1'];				$options['recursive'] = -1;				$supplierResults = $Supplier->find('first', $options);				if(!empty($supplierResults))					$orderResults[$numResult]['Supplier']['img1'] = $supplierResults['Supplier']['img1'];				/*				 * DES				 */						if($this->user->organization['Organization']['hasDes']=='Y') {									$DesOrdersOrganization = new DesOrdersOrganization();										$options = [];					$options['conditions'] = ['DesOrdersOrganization.order_id' => $result['Order']['id'],											'DesOrdersOrganization.organization_id' => $this->user->organization['Organization']['id']];					$options['recursive'] = -1;					$desOrdersOrganization = $DesOrdersOrganization->find('first', $options);					$orderResults[$numResult]['DesOrdersOrganization'] = $desOrdersOrganization['DesOrdersOrganization'];				} // DES				 				/*				 * ordine saldato dai gasisti				 * ordine pagato al produttore				 */ 				 $OrderLifeCycle = new OrderLifeCycle;								 $orderResults[$numResult]['orderStateNext'] = $OrderLifeCycle->getOrderStateNext($this->user, $result, $this->isReferenteTesoriere, $debug);				 $orderResults[$numResult]['PaidUsers'] = $OrderLifeCycle->getPaidUsers($this->user, $result, $debug);			 				 $orderResults[$numResult]['isPaidSupplier'] = $OrderLifeCycle->isPaidSupplier($this->user, $result, $debug);				 				 $orderResults[$numResult]['Order']['can_state_code_to_close'] = $OrderLifeCycle->canStateCodeToClose($this->user, $result, $debug);				 				 $orderResults[$numResult]['Order']['msgGgArchiveStatics'] = $OrderLifeCycle->msgGgArchiveStatics($this->user, $result, $debug);				 				 /*				  * recupero richiesta di pagamento 				  */ 				$orderResults[$numResult]['Order']['request_payment_num'] = '';				$orderResults[$numResult]['Order']['request_payment_id'] = '';								$request_payment_id = 0;  				$orderResults[$numResult]['Order']['request_payment_num'] = '';				if($this->user->organization['Template']['payToDelivery'] == 'POST' || $this->user->organization['Template']['payToDelivery']=='ON-POST') {										$orderResults[$numResult]['Order']['request_payment_num'] = $RequestPayment->getRequestPaymentNumByOrderId($this->user, $result['Order']['id']);					$orderResults[$numResult]['Order']['request_payment_id'] = $RequestPayment->getRequestPaymentIdByOrderId($this->user, $result['Order']['id']);					self::d('Order.request_payment_id '.$orderResults[$numResult]['Order']['request_payment_id'].' - FilterTestLifeCycleRequestPaymentId '.$FilterTestLifeCycleRequestPaymentId);										if(!empty($FilterTestLifeCycleRequestPaymentId)) {						if($FilterTestLifeCycleRequestPaymentId != $orderResults[$numResult]['Order']['request_payment_id'])							unset($orderResults[$numResult]);											}				} // end if($this->user->organization['Template']['payToDelivery'] == 'POST' || $this->user->organization['Template']['payToDelivery']=='ON-POST')						}			else				unset($orderResults[$numResult]);					} // loop Orders				self::d($orderListResults, false);				$this->set(compact('orderListResults', 'orderResults'));						if($this->user->organization['Template']['payToDelivery'] == 'POST' || $this->user->organization['Template']['payToDelivery']=='ON-POST') {			$options = [];			$options['conditions'] = ['RequestPayment.organization_id' => $this->user->organization['Organization']['id']];			$options['recursive'] = -1;			$options['fields'] = ['RequestPayment.id', 'RequestPayment.num'];			$options['order'] = ['RequestPayment.num desc'];			$requestPaymentResults = $RequestPayment->find('list', $options);			$this->set('requestPaymentResults', $requestPaymentResults);			if(!empty($FilterTestLifeCycleRequestPaymentId)) {				/*				 * dettagli requestPayment scelta				 */				$results = $RequestPayment->getAllDetails($this->user, $FilterTestLifeCycleRequestPaymentId);				self::d($results, false);				$this->set(compact('results'));							}		}    }		public function admin_test_function($order_id) {        		$debug=true;				App::import('Model', 'OrderLifeCycle');        $OrderLifeCycle = new OrderLifeCycle();				App::import('Model', 'Order');        $Order = new Order();				$options = [];		$options['conditions'] = ['Order.organization_id' => $this->user->organization['Organization']['id'], 'Order.id' => $order_id];		$options['recursive'] = 1;		$results = $Order->find('first', $options);		self::d($results, $debug);				$stateCodeAfter = $OrderLifeCycle->stateCodeAfter($this->user, $results, $results['Order']['state_code'], $debug);		self::d($stateCodeAfter, $debug);					exit;	}}